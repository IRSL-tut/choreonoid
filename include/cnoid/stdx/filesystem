#ifndef CNOID_STDX_FILESYSTEM_HEADER
#define CNOID_STDX_FILESYSTEM_HEADER


#include <chrono>


#include <filesystem>
namespace std::filesystem {

inline path lexically_normal(const path& p){
    return p.lexically_normal();
}


inline std::time_t last_write_time_to_time_t(const path& p){
    return std::chrono::duration_cast<std::chrono::system_clock::duration>(
        last_write_time(p).time_since_epoch()).count();
}

} // namespace

namespace cnoid::stdx {


namespace filesystem = std::filesystem;


typedef std::error_code error_code;
typedef filesystem::copy_options copy_options;
}



#endif
